<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gigarad</title>
    <description>Our two cents about iOS App Development, Android App Development and React Native App Development (a.k.a We write about Mobile App Development :D)</description>
    <link>"https://gigarad.co/blog/index.html"</link>
    <atom:link href="https://gigarad.co/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 19 Nov 2021 15:21:31 +0530</pubDate>
    <lastBuildDate>Fri, 19 Nov 2021 15:21:31 +0530</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Hello world, SwiftUI?</title>
        <description>&lt;p&gt;SwiftUI is the hot new tech from Apple. And I’m going to share my experiences creating a Hello Word project in the brand new SwiftUI user interface. And I should tell you, I’m excited to learn a new piece of tech in the Apple realm. Aren’t you?&lt;/p&gt;

&lt;h4 id=&quot;what-is-swiftui&quot;&gt;What is SwiftUI?&lt;/h4&gt;
&lt;p&gt;I started reading about &lt;a href=&quot;https://developer.apple.com/xcode/swiftui/&quot;&gt;SwiftUI&lt;/a&gt; in SwiftUI’s official page at Apple’s website. In short and according to Apple, SwiftUI is the modern way to declare user interfaces in any Apple platform. SwiftUI lets you declare the UI in Swift and preview it in realtime. SwiftUI not only makes the UI implementation easier but also makes it faster, since we can avoid build times while using StoryBoard.&lt;/p&gt;

&lt;h4 id=&quot;hello-world&quot;&gt;Hello, World&lt;/h4&gt;
&lt;p&gt;Let’s start by creating a new project in Xcode.
Open Xcode(Version 11 or later required) and select create a new Xcode project.
&lt;img src=&quot;../assets/images/create-new-xcode-project.png&quot; alt=&quot;create-new-xcode-project&quot; class=&quot;img-responsive&quot; /&gt;
Then choose the template as Single View App and click Next
&lt;img src=&quot;../assets/images/select-single-view-app.png&quot; alt=&quot;select-single-view-app&quot; class=&quot;img-responsive&quot; /&gt;
And then fill in the details for the new project and make sure you’ve selected &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwiftUI&lt;/code&gt; for the User Interface. And click Next.
&lt;img src=&quot;../assets/images/select-swiftui-user-interface.png&quot; alt=&quot;select-swiftui-user-interface&quot; class=&quot;img-responsive&quot; /&gt;
And then choose your preferred directory and click on Create to create your new Project. Once you’ve created your project you will be presented with a screen like this.
&lt;img src=&quot;../assets/images/hello-world.png&quot; alt=&quot;hello-world&quot; class=&quot;img-responsive&quot; /&gt;
From my many years of experience in the iOS app development, UI wise the first thing that comes to my attention is that Xcode’s new Assistant editor. Now it makes total sense why Apple have made changes there, it really works well with the new SwiftUI.&lt;/p&gt;

&lt;p&gt;On the right you can see the preview of the UI you’re working on and on the left you can easily edit the code. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resume&lt;/code&gt; to see the preview working.
&lt;img src=&quot;../assets/images/hello-world-resume.png&quot; alt=&quot;hello-world-resume&quot; class=&quot;img-responsive&quot; /&gt;
Once you’ve clicked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resume&lt;/code&gt; you’ll see the preview of the UI in the canvas and it says “Hello, World”, Voila!&lt;/p&gt;

&lt;p&gt;And the code in the editor looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SwiftUI&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView_Previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreviewProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are seeing three things here, an import statement and two structs. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; statement imports the brand new SwiftUI framework and the two structs declares the UI.&lt;/p&gt;

&lt;p&gt;The first struct - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentView&lt;/code&gt; conforms to the protocol &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;. And as required by the protocol the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentView&lt;/code&gt; struct has implemented a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; variable of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some View&lt;/code&gt;. The body variable is a getter and has a Text object initialized with String “Hello, World”. And you must have noticed the keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some&lt;/code&gt; in it and it’s not a mistake. The new keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some&lt;/code&gt; is at the epicentre of the new feature &lt;strong&gt;Opaque Types&lt;/strong&gt;. And Opaque types are introduced and supported only in Swift 5.1.&lt;/p&gt;

&lt;h4 id=&quot;how-to-make-opaque-types&quot;&gt;How to make Opaque Types?&lt;/h4&gt;
&lt;p&gt;In order to understand Opaque type you must need a clear understanding of how Generic and Protocol types work. In earlier Swift Versions (version &amp;lt; 5.1) many must have faced this issue. We will be required to define a concrete type whenever we return a protocol type that has an associated type. This is because Swift compiler won’t be able to compare or understand the underlying types of the Protocol types with the associated type. On the other hand the Opaque type will let the compiler understand and compare the type. Opaque type gives us the guarantee that the underlying type conforms to a particular protocol. You should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some&lt;/code&gt; keyword before your normal type to make a type opaque, for example as we saw in the code above &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var body: some View&lt;/code&gt;. I believe opaque types makes the SwiftUI possible, since an object of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; can contain any kind of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; object of type which conforms to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; protocol. If the above doesn’t make any sense and to read more in detail about Opaque Type visit the official &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html&quot;&gt;Swift page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentView&lt;/code&gt; struct there is a second struct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentView_Previews&lt;/code&gt; which conforms to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreviewProvider&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreviewProvider&lt;/code&gt; protocol requires a body object as well, which will be rendered in the preview.&lt;/p&gt;

&lt;p&gt;And there is also a new Delegate to support SwiftUI. It’s called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SceneDelegate.swift&lt;/code&gt;, and you can find it in the navigator. It contains the boiler plate code that lets you manage your UI in different scenarios. We will discuss more about SwiftUI in the future.&lt;/p&gt;

</description>
        <pubDate>Sun, 29 Dec 2019 15:48:00 +0530</pubDate>
        <link>https://gigarad.co/blog/articles/how-to-helloworld-swiftui.html</link>
        <guid isPermaLink="true">https://gigarad.co/blog/articles/how-to-helloworld-swiftui.html</guid>
        
        <category>SwiftUI</category>
        
        <category>beginner</category>
        
        <category>Swift</category>
        
        <category>Opaque-types</category>
        
        
      </item>
    
      <item>
        <title>How to create UITableView(TableView) in SwiftUI?</title>
        <description>&lt;p&gt;If you’re familiar with iOS app development you must have come around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;, it’s one of the most important and very basic element in the iOS app development. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; is used to display data in a list and it also gives the developer a fair amount of control over how the data is presented and how the user can interact with it. And for people from other realms, it’s like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt; of Android and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FlatList&lt;/code&gt; of React Native. Even though they are used to solve the same problem(Displaying the data in a list), they are architecturally very different. And let’s see how we are going to display a list of data in SwiftUI.&lt;/p&gt;

&lt;h4 id=&quot;swiftuis-list&quot;&gt;SwiftUI’s List&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; is used to display a list of data in SwiftUI. And implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; is the most declarative way a single row table can be. Unlike &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; can have any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; as its basic building element and they are not limited to something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt;. To learn more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;, let’s create an App that lists the items in menu of a typical restaurant.&lt;/p&gt;

&lt;p&gt;If you’re feeling lazy to create the project, and add &amp;amp; process the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; file, you can download the initial code from &lt;a href=&quot;https://github.com/gauthamilango/InitialRestaurantApp/archive/master.zip&quot;&gt;here&lt;/a&gt; and jump right to the next section by clicking &lt;a href=&quot;#menu-row&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open Xcode and select Create a new Xcode project.
&lt;img src=&quot;../assets/images/create-new-xcode-project.png&quot; alt=&quot;create-new-xcode-project&quot; class=&quot;img-responsive&quot; /&gt;
Then choose the template as Single View App and click Next
&lt;img src=&quot;../assets/images/select-single-view-app.png&quot; alt=&quot;select-single-view-app&quot; class=&quot;img-responsive&quot; /&gt;
And then fill in the details for the new project, let’s name the app “RestaurantMenu” and make sure you’ve selected &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwiftUI&lt;/code&gt; for the User Interface. And click Next.
&lt;img src=&quot;../assets/images/create-restaurant-menu-app.png&quot; alt=&quot;create-restaurant-menu-app&quot; class=&quot;img-responsive&quot; /&gt;
And then choose your preferred directory and click on Create to create your new Project. Once you’ve created your project you will be presented with a screen like this.
&lt;img src=&quot;../assets/images/hello-world.png&quot; alt=&quot;hello-world&quot; class=&quot;img-responsive&quot; /&gt;
Now we can start by adding the seed data for the restaurant Menu, which will be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; file and contains details about the dish. Create a new Empty file by using the shortcut key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD + N&lt;/code&gt; and selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Empty&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Other&lt;/code&gt; section.
&lt;img src=&quot;../assets/images/select-empty-file.png&quot; alt=&quot;select-empty-file&quot; class=&quot;img-responsive&quot; /&gt;
And then enter the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;menuData.json&lt;/code&gt; and click on Create to create the file.
&lt;img src=&quot;../assets/images/create-menu-data-json.png&quot; alt=&quot;create-menu-data-json&quot; class=&quot;img-responsive&quot; /&gt;
And then enter the contents in the below sample or you can add your own.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Noodles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cuisine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Chinese&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;noodles&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pizza&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cuisine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Italian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pizza&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Burger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cuisine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;American&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;burger&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;French Fries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cuisine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;American&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frenchFries&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sushi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cuisine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Japanese&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sushi&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Dosa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cuisine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Indian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;idly&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hendl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cuisine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;German&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hendl&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Shawarma&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cuisine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Middle Eastern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shawarma&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Tacos de Papa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cuisine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mexican&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;imageName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tacosDePapa&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And add appropriate images. Create a group called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resources&lt;/code&gt; and move them all in. And make sure they all added in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Copy Bundle Resources&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt; in your project.&lt;/p&gt;

&lt;h4 id=&quot;processing-the-json-data&quot;&gt;Processing the JSON Data&lt;/h4&gt;
&lt;p&gt;First we need to define the structure of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dish&lt;/code&gt; items to process the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt;. Create a new Swift file and name it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dish&lt;/code&gt; and add the contents from below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Hashable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identifiable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cuisine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see that the types and names are similar to the data in JSON file. And we are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt;, so that we don’t have to do any additional work in processing/decoding the JSON file.&lt;/p&gt;

&lt;p&gt;Create another file, call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API&lt;/code&gt; and add the following contents.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processJSONData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;menuData.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processJSONData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decodable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Couldn't find &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; in main bundle.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Couldn't load &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; from main bundle:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;decoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Couldn't parse &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; as &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RestaurantImageStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GRImageDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;fileprivate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GRImageDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:]&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;fileprivate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RestaurantImageStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;guaranteeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RestaurantImageStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;verbatim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadPNGImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGImage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGImageSourceCreateWithURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGImageSourceCreateImageAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Couldn't load image &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.png from main bundle.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;fileprivate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;guaranteeImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GRImageDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RestaurantImageStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadPNGImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The above code is pretty simple. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadPNGImage&lt;/code&gt; function looks for the file and then gets the data from it. And later decodes it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSONDecoder.decode&lt;/code&gt;. The generic type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; has a constraint, it should conform to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decodable&lt;/code&gt;. We are assigning the output of the function call in the first statement to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;menuItems&lt;/code&gt;, a constant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dish&lt;/code&gt; items. So the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dish&lt;/code&gt; is implicitly taken as the generic type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;, you must have noted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dish&lt;/code&gt; conforms to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Codable&lt;/code&gt; itself conforms to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Encodable&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decodable&lt;/code&gt;, so the constraint is satisfied. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RestaurantImageStore&lt;/code&gt; processes the imageName and provides us an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image&lt;/code&gt; element which we can use directly in our SwiftUI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;menu-row&quot;&gt;Menu Row&lt;/h4&gt;
&lt;p&gt;Now let’s create the row element for our Menu List. Use shortcut key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD + N&lt;/code&gt;, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwiftUI View&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Interface&lt;/code&gt; section. And name the file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MenuRow&lt;/code&gt; and click Create to create the file. You will be presented with the new file, with the boiler plate code, that displays “Hello,World!”. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resume&lt;/code&gt; button in the canvas on the right hand side to see the previews. Let’s replace the code of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MenuRow&lt;/code&gt; struct with the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dish&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;HStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resizable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;verbatim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Spacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We are using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HStack&lt;/code&gt;. And it lets us add SwiftUI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt; elements in a horizontal direction. If you’ve past experience with Swift, you must wonder how this is possible. This kind of syntax is possible due to the new features in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Swift 5.1&lt;/code&gt;, return omission and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FunctionBuilders&lt;/code&gt;. And this is how we implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt; like structure in SwiftUI. In the preview it should look something like this.
&lt;img src=&quot;../assets/images/menu-row-simple-uitableviewcell-of-swiftui.png&quot; alt=&quot;menu-row-simple-uitableviewcell-of-swiftui&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;menu-list&quot;&gt;Menu List&lt;/h4&gt;
&lt;p&gt;Now let’s create our Menu table or list. Again create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwiftUI View&lt;/code&gt; by creating a new file and now name it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MenuList&lt;/code&gt;. And replace the content of the getter of variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MenuList&lt;/code&gt; struct with the following code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;MenuRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it. Click on preview to see the List working.
&lt;img src=&quot;../assets/images/menu-list-simple-uitableview-of-swiftui.png&quot; alt=&quot;menu-list-simple-uitableview-of-swiftui&quot; class=&quot;img-responsive&quot; /&gt;
Pretty simple huh? If you’re from iOS development background, you would be shocked, because the above code is very very minimal and highly declarative and makes complete sense. All thanks to the Opaque types, Function Builders and Return omission features in the Swift 5.1. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dish&lt;/code&gt; struct conforming to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identifiable&lt;/code&gt; protocol lets us not declare the unique id key path, which is required to initialize the SwiftUI &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;. More on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewBuilder&lt;/code&gt; and function builders in the future, they make this kind of code possible. You can &lt;a href=&quot;https://github.com/gauthamilango/completeRestaurantMenuApp/archive/master.zip&quot;&gt;download the completed project here&lt;/a&gt;. To know more you can look into &lt;a href=&quot;https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation&quot;&gt;Apple’s official SwiftUI tutorials by clicking here.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jan 2020 15:30:00 +0530</pubDate>
        <link>https://gigarad.co/blog/articles/how-to-create-table-view-in-swiftui.html</link>
        <guid isPermaLink="true">https://gigarad.co/blog/articles/how-to-create-table-view-in-swiftui.html</guid>
        
        <category>SwiftUI</category>
        
        <category>beginner</category>
        
        <category>Swift</category>
        
        <category>UITableView</category>
        
        <category>TableView</category>
        
        <category>List</category>
        
        <category>tutorial</category>
        
        
      </item>
    
      <item>
        <title>How to navigate(UINavigationController) in SwiftUI?</title>
        <description>&lt;p&gt;Every iOS application developer should have familiarity with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;. The navigation controller from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIKit&lt;/code&gt; is used to
manage screens or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt; uses a stack to manage the screens. We can push and pop screens out of it, we use many approaches for bringing a screen or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; to the front or switching or transitioning between screens or presenting it as a modal. For example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;segue&lt;/code&gt; in the StoryBoard.&lt;/p&gt;

&lt;h4 id=&quot;navigationview-of-swiftui&quot;&gt;NavigationView of SwiftUI&lt;/h4&gt;
&lt;p&gt;SwiftUI lets us navigate between screens or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;s by using a struct called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt; conforms to the protocol &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;, And it does not have a body. Instead it can have content like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VStack&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HStack&lt;/code&gt;. To learn more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt; let’s update our RestaurantMenu app and dive into the menu and look for more details. You can complete the steps in our previous post to &lt;a href=&quot;/blog/articles/how-to-create-table-view-in-swiftui.html&quot;&gt;create the menu app here&lt;/a&gt; in our previous post or &lt;a href=&quot;https://github.com/gauthamilango/completeRestaurantMenuApp/archive/master.zip&quot;&gt;Download the RestaurantMenu project here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;menu-detail&quot;&gt;Menu Detail&lt;/h4&gt;
&lt;p&gt;Let’s create a menu detail screen, so that we can display details of a menu if a user clicks on a menu. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD + N&lt;/code&gt; shortcut to Create a new file and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwiftUI View&lt;/code&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User Interface&lt;/code&gt; section. And now copy the code below and paste it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MenuDetail&lt;/code&gt; struct. We will get into detail about this in our upcoming posts.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dish&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;edgesIgnoringSafeArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scaledToFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clipShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

          &lt;span class=&quot;kt&quot;&gt;HStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuisine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subheadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fontWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;kt&quot;&gt;Spacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Spacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;navigationBarTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;verbatim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;displayMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After entering the code, the preview should look like this.
&lt;img src=&quot;../assets/images/menu-detail.png&quot; alt=&quot;menu-detail&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-to-navigate-between-screens-in-swiftui&quot;&gt;How to Navigate between screens in SwiftUI?&lt;/h4&gt;
&lt;p&gt;Copy the below code into the getter of var &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MenuList&lt;/code&gt; struct.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;NavigationView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menuItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MenuDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;kt&quot;&gt;MenuRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;navigationBarTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Menu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;navigationBarTitle&lt;/code&gt; modifier sets the title &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; of the screens inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt;. Now you can run the preview in the canvas to see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt; working. Clicking on a row will take you to the respective Menu Details screen. Here, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationLink&lt;/code&gt; works similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segue&lt;/code&gt; but in SwiftUI and in the most declarative way. This is how it should look.
&lt;img src=&quot;../assets/images/menu-with-navigation-view.png&quot; alt=&quot;menu-with-navigation-view&quot; class=&quot;img-responsive&quot; /&gt;
Clicking on a row will take you to menu details screen.
&lt;img src=&quot;../assets/images/menu-detail-in-navigation-view.png&quot; alt=&quot;menu-detail-in-navigation-view&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will dive in deep in the future posts about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt;. You can download &lt;a href=&quot;https://github.com/gauthamilango/NavigatableRestaurantMenu/archive/master.zip&quot;&gt;completed project here&lt;/a&gt; and find &lt;a href=&quot;https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation&quot;&gt;more info on NavigationView here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jan 2020 13:30:00 +0530</pubDate>
        <link>https://gigarad.co/blog/articles/how-to-navigate-in-swiftui.html</link>
        <guid isPermaLink="true">https://gigarad.co/blog/articles/how-to-navigate-in-swiftui.html</guid>
        
        <category>SwiftUI</category>
        
        <category>beginner</category>
        
        <category>Swift</category>
        
        <category>UINavigationController</category>
        
        <category>NavigationView</category>
        
        <category>NavigationLink</category>
        
        
      </item>
    
      <item>
        <title>How to fix the issue with downloading provisioning profile for your app after upgrading to Xcode 13?</title>
        <description>&lt;p&gt;After using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macOS BigSur&lt;/code&gt; for almost an year, we decided to upgrade to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macOS Monterey&lt;/code&gt;. Once we upgraded to the brand new OS, we also decided to get all the way with the new UI/UX and update our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; to the latest version. So we upgraded from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode 12&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode 13&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;macos-monterey-and-xcode-13&quot;&gt;macOS Monterey and Xcode 13&lt;/h4&gt;
&lt;p&gt;Without any doubt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macOS Monterey&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode 13&lt;/code&gt; looked great in the new UI. And UX is great as the usable screen area has increased a lot. Eventhough we loved the new UI, it took a little bit of time for us to get used to the new icons in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode 13&lt;/code&gt; and the UX changes.&lt;/p&gt;

&lt;h4 id=&quot;issue-with-downloading-provisioning-profile-while-trying-to-upload-an-archive-in-xcode-13---our-first-issue&quot;&gt;Issue with downloading provisioning profile while trying to upload an archive in Xcode 13 - Our first issue&lt;/h4&gt;
&lt;p&gt;We were in rush working with one of our project as we were almost close to the deadline of delivering the app to our client. We were in final rounds of testing and we were making an archive to upload to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppStoreConnect&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Testflight&lt;/code&gt; for regression and beta testing. After creating the archive we tried to upload it to the AppStoreConnect and we got stuck there. The issue is we were not able to get the provisioning profile like we used to. Apple must have changed the Xcode 13’s behaviour about how it manages and downloads the provisioning profile.
&lt;img src=&quot;../assets/images/provisioning-profile-download-issue.png&quot; alt=&quot;provisioning-profile-download-issue&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;solution&quot;&gt;Solution?&lt;/h4&gt;
&lt;p&gt;The cause of the issue is that Apple changed the way Xcode manages provisioning profiles. Instead of locally creating and managing provisioning profiles, Apple moved them to the cloud. And they didn’t just stop there and updated the user roles &amp;amp; access in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App Store Connect&lt;/code&gt; and added an additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access to Cloud Managed Distribution Certificate&lt;/code&gt; permission under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access to Certificates, Identifiers &amp;amp; Profile&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Additional Resources&lt;/code&gt;. You need to be an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Admin&lt;/code&gt; in order to enable this for anyone with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Developer&lt;/code&gt; role. Follow the steps below to fix this issue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://appstoreconnect.apple.com&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App Store Connect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Select the “Users and Access” tab&lt;/li&gt;
  &lt;li&gt;Select the right person and under Additional Resources, check both
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access to Certificates, Identifiers &amp;amp; Profiles and&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access to Cloud Managed Distribution Certificate&lt;/code&gt;
&lt;img src=&quot;../assets/images/provisioning-profile-download-issue-solution.png&quot; alt=&quot;provisioning-profile-download-issue-solution&quot; class=&quot;img-responsive&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We found this issue as an easy one to fix, Thanks to &lt;a href=&quot;https://stackoverflow.com/users/7196540/michal-Šrůtek&quot;&gt;Michal Šrůtek&lt;/a&gt; on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;Stackoverflow&lt;/a&gt;. His &lt;a href=&quot;https://stackoverflow.com/a/69688381&quot;&gt;solution&lt;/a&gt; is easy to follow.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Nov 2021 13:30:00 +0530</pubDate>
        <link>https://gigarad.co/blog/articles/how-to-fix-the-issue-with-downloading-provisioning-profile-for-your-app-after-upgrading-to-xcode-13.html</link>
        <guid isPermaLink="true">https://gigarad.co/blog/articles/how-to-fix-the-issue-with-downloading-provisioning-profile-for-your-app-after-upgrading-to-xcode-13.html</guid>
        
        <category>Xcode13</category>
        
        <category>Xcode</category>
        
        <category>provisioning-profile</category>
        
        
      </item>
    
      <item>
        <title>How to Develop a Custom Mobile App for Your Business?</title>
        <description>&lt;p&gt;In the modern era, regardless of your financial status, everyone can afford a smartphone. That means everyone from every walk of life is a potential client. A mobile application allows you to reach a bigger  target audience with ease. Yeah, it’s that easy!&lt;/p&gt;

&lt;p&gt;You could be planning to change the internal process of your business, looking to expand your organization’s presence in the market, or working for a new idea, which can help transform your business and the world. To achieve this, you merely need to build a custom mobile application that can help you accomplish your objectives efficiently and effectively. Needless to say, your mobile app should be user-friendly and easy to navigate. And, voila! You’ve done almost half the work you need to succeed.&lt;/p&gt;

&lt;h4 id=&quot;why-do-you-need-custom-mobile-applications&quot;&gt;Why do you need Custom Mobile Applications?&lt;/h4&gt;
&lt;p&gt;To make a top-notch, bug-free, and flawless mobile application, you need a framework design that is efficient and has good coding. A good software developer will help you select the most suitable platform for your mobile application that would guarantee your clients get the remarkable experience they anticipate.&lt;/p&gt;

&lt;h4 id=&quot;platforms-on-which-a-mobile-application-works&quot;&gt;Platforms on which a Mobile Application works:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt;: You can develop rich and instinctive mobile applications, which are developed on languages like Java or Kotlin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iOS&lt;/strong&gt;: You get a powerful and versatile mobile application that is developed on programming languages like &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Swift_(programming_language)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Swift&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Objective-C&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Objective-C&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-Platform&lt;/strong&gt; : Make mobile applications that can be used on different platforms at the same time using the most advanced coding language &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://reactnative.dev/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React Native&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://flutter.dev/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flutter&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;five-ways-in-which-mobile-applications-can-help-business&quot;&gt;Five ways in which mobile applications can help business&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/mobile-app-business-art.png&quot; alt=&quot;mobile-application-development&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Enhances your client’s value:&lt;/strong&gt; Client commitment is the main part of client relations, collaborations, and exchanges. When somebody searches for your goods or services, it’s crucial to keep the individual locked in. You should expand your connection with the clients for the better advancement of deals. So how does a mobile application fit in here? Starbucks’ mobile application is one of the best examples when it comes to understanding successful digital engagement. It’s easy to understand with great user experience, loyalty programs that are engaging and motivating, and easy payment and ordering system, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Brand building:&lt;/strong&gt; Previously, brands used to publicize their products through banners, boards, and hoardings. Organizations engrave their image logos on such keepsakes to build their brand image. Today, a mobile application is equipped to deliver all this and more. A mobile application can advance brand mindfulness and acknowledgment among clients and be a powerful correspondence channel. By consistently allowing you to connect with your target group, you can procure client trust. A customized mobile application can help your clients understand your brand image, your brand value, and draw in them adequately. The more they pay attention to you and your attempts to sell something, the more they will focus on your image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Improves sales:&lt;/strong&gt; You can include different loyalty programs in your mobile application. It will cause your clients to return to your store (computerized/physical) and invest more money and time. Offering rewards ) through such loyalty programs allows the clients to invest more money in the business and helps in brand acknowledgment.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Gamification is another way by which you can earn client recognition, winning clients confidence in your brand, and offering discounts and other promotional offers to pique their interest in your brand. Scratch-and-win is another component that can help raise commitment among clients.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4. Improves proficiency:&lt;/strong&gt; Coordinated shopping baskets with food ordering and planning permits the business to include different functionalities like creating a strong digital footprint within their application. For example, if a diner combines an online food requesting framework inside its application, it will most probably witness a substantial growth    in web and in-application requesting. Essentially, if a retail business teams up with an online business framework, it’s anything but a useful development and in the end, generally speaking, deals. With mobile applications, organizations can upgrade client commitment with inbuilt booking programming that informs clients about the timetable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Create a reliable client base:&lt;/strong&gt; Having a reliable client base is basic for any business. A mobile application is probably the most ideal approach to draw in with clients and make a steadfast client base. An application permits clients to connect with your business whenever the timing is ideal. With reference programs, you can urge your customers to allude to your items or administrations to other people.&lt;/p&gt;

&lt;h4 id=&quot;applications-of-a-custom-mobile-app&quot;&gt;Applications of a Custom Mobile App&lt;/h4&gt;
&lt;p&gt;If you still have doubts about how a custom mobile application can be useful for your business, then let us make this even more clear:&lt;/p&gt;

&lt;p&gt;Inform clients about your new offers and items
Connect with younger crowds
Add analytic features if required to track sales and growth.
Have customized UI and interface to craft tailor made and relevant experience for your target audience.
Helps you stay ahead of your competitors&lt;/p&gt;

&lt;h4 id=&quot;process-of-mobile-application-development&quot;&gt;Process of Mobile Application Development&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. Conducting the Research:&lt;/strong&gt; The first step of mobile application development is creating a plan, understanding the target audience, zeroing in on the features and the life-cycle of the application software. Other than fusing the brand into the plan while developing the mobile application, the engineer should understand the difference between how individuals will be using the mobile site and how they will be using the mobile application. Next, the software developer along with his team will build a plan to make the client understand how the proposed application will work on different interfaces, platforms, and devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Designing:&lt;/strong&gt; The purpose of this step is to drive quality user experience and connect users with the app. Creating a design helps improve its engagement rate, encourages user adoption and interaction. The first step to design is to understand information architecture and workflows. In simple terms, determine the type of data it will collect from users as well as offer them. They also help create workflow diagrams which will chart out the app’s navigation pathway for the users. Post determining the workflows, wireframes come into the picture. Wireframes digital sketches of an app, complete with layouts and mockups to give a structural as well as aesthetical identity to the app. Once the wireframes are completed, different mockups are created to be shared with the app owner. Different styles and options allow the scope for improvement and modification, if any.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Creating a prototype:&lt;/strong&gt; A prototype may be unpleasant in the beginning. It is filled with bugs and execution issues, but that’s just the beginning of a beautiful journey of your custom mobile application. From start to end, the software developer creates a prototype to give you an idea how the application will look like, how the information will be displayed, and how your customers will be receiving it. Once that process is done. That application is released for beta testers for issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Development :&lt;/strong&gt;  The main purpose of the development process is making sure that the clients have the best user experience. Both the planning and development start almost immediately in the process; it must be appropriately done once the research has been conducted and a prototype of the application has been developed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Testing:&lt;/strong&gt; Once the application has been planned and created it should be tried for  bugs and pre-deployment issues before being delivered in full. A test variant of the application can be delivered to the crowd and input can be looked for. If there are any issues it very well may be costly to fix them later once the application has been delivered. Along these lines, mobile application developers ought to fix these issues and bugs in the testing stage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Making application live:&lt;/strong&gt; The last step that mobile application designers need to take when it comes to the mobile application process is making it live. Anyway once the application is being downloaded and used by your clients, you need to watch out for feedback, which is an essential part of the mobile application development process. The mobile application developer should be prepared to address every one of the feedback and fix what isn’t right with the application.
&lt;img src=&quot;../assets/images/mobile-app-development-process.png&quot; alt=&quot;application-development-process&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h4&gt;
&lt;p&gt;Application development is a long-term process that does not end with deployment. To make sure your clients are happy and getting the best from your application, you need to learn how to handle client criticism and feedback and use them in a way in which you can  improve your application while also improving your relationship with your clients.&lt;/p&gt;

&lt;p&gt;Throughout the long term - mobile application development and deployment - you have to understand different aspects of the mobile application dependent, which involves finances, designing, distribution, and feedback. By following this mobile development process, not only will you have a mobile application that fulfills your client’s needs but will also be fruitful and helpful in expanding your business.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Nov 2021 16:30:00 +0530</pubDate>
        <link>https://gigarad.co/blog/articles/how-to-develop-a-custom-mobile-app-for-your-business.html</link>
        <guid isPermaLink="true">https://gigarad.co/blog/articles/how-to-develop-a-custom-mobile-app-for-your-business.html</guid>
        
        <category>Business</category>
        
        <category>custom</category>
        
        <category>mobile</category>
        
        <category>app</category>
        
        
      </item>
    
      <item>
        <title>How Mobile Application Development Frameworks can Create the Right App for Your Business?</title>
        <description>&lt;p&gt;So, finally, you’ve decided to expand your business and your view to reaching out to a larger audience. Now that you have chosen to go into the mobile application scene, you must be wondering which framework is an ideal choice for your mobile application development. Sounds right, doesn’t it?&lt;/p&gt;

&lt;p&gt;Well, it doesn’t make any difference if you need a gaming application or retail application; the most important thing is you need the right framework on which you can develop the said application that can set up your business and take it to a higher level.&lt;/p&gt;

&lt;p&gt;Today, we are all surrounded by hundreds of applications and we spend most of our days browsing through them. In any case, have you ever wondered - “How do new companies transform their business digitally?” or “How are mobile applications going to transform the online world?”&lt;/p&gt;

&lt;p&gt;If you are looking to create a unique mobile application, the right development libraries, tools, and frameworks, each of them contribute towards delivering the best-ever mobile app experiences. Although there are so many mobile application development frameworks in the market, you must take special care when making the decision to choose the ideal one for your business.&lt;/p&gt;

&lt;p&gt;Let’s dive in deeper into mobile application framework, so you can make informed decisions for your business.&lt;/p&gt;

&lt;h4 id=&quot;what-is-mobile-application-development-framework&quot;&gt;What Is Mobile Application Development Framework?&lt;/h4&gt;
&lt;p&gt;A framework that offers a crucial construction to applications for their successful execution. These are the toolboxes that help application engineers construct the most hearty, high-performance and secure apps. Also, before you plunge into the determination of the one, you need to comprehend different classifications of applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Native Applications&lt;/strong&gt;: Native applications were conceptualized to bring forth customization and efficiency to businesses via applications. This may be because these apps are created using the certain platforms’ core programming language and APIs which make them highly compatible. Invariably, these apps, thanks to the autonomy, are more secure, reliable and less likely to develop a bug problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-platform Applications&lt;/strong&gt;: As the name suggests, cross-platform applications are the ones that are able to work on multiple mobile platforms. It is easy to confuse them with hybrid applications but the glaring difference between the two is shareability. Cross platforms apps allow code sharing while hybrids don’t. They are compatible with both Android and iOS which improves their adaptability as well as efficacy in reaching out to a larger clientele. Some of the best examples of cross platform applications are  Facebook Ads Manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/native-vs-crossplatform.jpg&quot; alt=&quot;Native Vs Cross Platform Applications&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-applications-help-your-business&quot;&gt;How Applications Help Your Business&lt;/h4&gt;
&lt;p&gt;Once you have decided you need a mobile application for your business, you need to understand how it is going to benefit your business, for whom you need it, and how it will be reaching out to the target market.&lt;/p&gt;

&lt;p&gt;Here we will be discussing the application development process:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Research who is your target audience and their needs&lt;/strong&gt;
To develop a first-rate mobile application, you need to better understand the market, the crowd you need to target, and what interests your consumers as well as their most recent buying patterns. Having point-by-point statistical surveying can assist you with giving important experiences on how mainstream applications are functioning on the lookout. This further empowers you to determine the issues of clients.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Identifying the Right Audience is Critical&lt;/strong&gt;
With regards to choosing the right framework for your mobile application, distinguishing the right crowd is a must. The accomplishment of a mobile application completely relies on the determination of the intended target audience. How the client is using your said services is also one of the most important factors to determine the kind of working framework. You make a point that they have an application worth spending the money on. To all the more likely know your crowd, here are a couple of things you can zero in on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Know which crowd needs your application i.e. their geographic location and their socioeconomic background&lt;/li&gt;
  &lt;li&gt;Figure out how your application can improve the lives of your intended interest group&lt;/li&gt;
  &lt;li&gt;Know how your application will address the issue that your target audience may have&lt;/li&gt;
  &lt;li&gt;What do you want to achieve from your application?&lt;/li&gt;
  &lt;li&gt;What platform suits your requirements?&lt;/li&gt;
  &lt;li&gt;Is your application suitable for iOS or Android, or both?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Features That Will Make Your Application Successful&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every one of the features that you may be adding to your application - Android or iOS - will work in a different way. Say, for example, you have decided to develop a cross-platform application, you need to include features like simple navigation, fast app loading speed, security, flexibility, notifications/alerts, intelligent search filters, etc. to make sure your application is the best in the segment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cost of the Mobile Application Development&lt;/strong&gt;
Cost is additionally one of the huge variables when it comes to developing a mobile application. It relies on whom you are recruiting, either an in-house designer or hire an outsourcing company. The type of industry will choose the expense of the application in addition to the application type you need, features, and functionalities you need to add to the application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed Consideration&lt;/strong&gt;
The speed of an application is one of the most important factors to consider when choosing the framework. Applications need to work quickly, similarly to the sites, to keep up with your clients’ needs and requirements. Pretty much every application type should include quick execution for ease of use. Applications made on coding languages like Java and Swift have better speed, easy-to-use, and user friendly.&lt;/p&gt;

&lt;h4 id=&quot;2021s-best-mobile-application-development-frameworks&quot;&gt;2021’s Best Mobile Application Development Frameworks&lt;/h4&gt;
&lt;p&gt;All the above fundamental components help you pick the appropriate framework for the application. We have a rundown of top mobile application frameworks that application engineers regularly use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. React Native:&lt;/strong&gt; If you are looking for a framework that can be used for developing local applications for all gadgets and stages, then &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://reactnative.dev/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React Native&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; is a perfect choice. React Native allows you to develop feature-rich applications for both iOS and Android-based devices. It also allows you to make platform-specific applications that can be used on cross-platform devices.&lt;/p&gt;

&lt;h5 id=&quot;features&quot;&gt;Features:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;No need for extensive coding&lt;/li&gt;
  &lt;li&gt;Third-party plugin support&lt;/li&gt;
  &lt;li&gt;Predictive UI&lt;/li&gt;
  &lt;li&gt;Suitable for both Android and iOS-based platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Flutter:&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://flutter.dev/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flutter&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; is a UI tool designed by Google to help in building local applications for the web, mobile, and work area. This UI toolbox is included with completely modified gadgets, which support making local applications in a brief period. Additionally, Flutter’s layered design guarantees a quicker delivery of segments.&lt;/p&gt;

&lt;h5 id=&quot;features-1&quot;&gt;Features:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Underlying material plan&lt;/li&gt;
  &lt;li&gt;Implicit Cupertino (iOS-flavor) gadgets&lt;/li&gt;
  &lt;li&gt;Rich movement APIs&lt;/li&gt;
  &lt;li&gt;Supports the two iOS and Android&lt;/li&gt;
  &lt;li&gt;Solid gadget support&lt;/li&gt;
  &lt;li&gt;Elite application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Xamarin:&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://dotnet.microsoft.com/apps/xamarin&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xamarin&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; is one of the high-quality mobile application frameworks, which is developed by Microsoft. It is .Net-based and suitable for local applications. Xamarin offers an advanced biological framework with backend, API, segments, and so on, which makes it best for cross-platform and open-source applications. With Xamarin engineers, you can develop local apps with the help of a functioning local area for different devices.&lt;/p&gt;

&lt;h5 id=&quot;features-2&quot;&gt;Features:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Adaptable backend foundation&lt;/li&gt;
  &lt;li&gt;Indicative instruments&lt;/li&gt;
  &lt;li&gt;Application developed on it is faster to load&lt;/li&gt;
  &lt;li&gt;SDK director for Android devices&lt;/li&gt;
  &lt;li&gt;Storyboard records&lt;/li&gt;
  &lt;li&gt;Google emulator director&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Adobe PhoneGap :&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Cordova&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adobe PhoeGap&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;  is the brainchild of software companies Adobe and Apache which is used for developing Android applications. This mobile application framework uses coding languages like HTML5, CSS3, and JavaScript and can also be used for cross-platform application development.&lt;/p&gt;

&lt;h5 id=&quot;features-3&quot;&gt;Features:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;It is an open-source framework&lt;/li&gt;
  &lt;li&gt;Adaptability&lt;/li&gt;
  &lt;li&gt;Viable on every one of the stages&lt;/li&gt;
  &lt;li&gt;Simplicity of Development&lt;/li&gt;
  &lt;li&gt;Solid Backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/reactnative-vs-flutter-vs-xamarin.png&quot; alt=&quot;Comparison of React native, Flutter and Xamarin &quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h4&gt;
&lt;p&gt;Making a choice of the best framework for application is not any more difficult if you have the appropriate direction set up. In light of your business prerequisites and the requests of the buyers, you can without much of a stretch pick the framework that is adaptable enough for what’s to come.&lt;/p&gt;

&lt;p&gt;If you need assistance in finding a mobile application framework that makes your business better and allows you to carve a niche for yourself, if it’s not too much trouble, go ahead and contact a mobile application developer who can help you select the best framework that will meet your needs and requirements. With their immense information and experience, they can help you settle on an optimal decision.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Nov 2021 13:30:00 +0530</pubDate>
        <link>https://gigarad.co/blog/articles/how-mobile-app-development-frameworks-can-create-the-right-app-for-your-business.html</link>
        <guid isPermaLink="true">https://gigarad.co/blog/articles/how-mobile-app-development-frameworks-can-create-the-right-app-for-your-business.html</guid>
        
        <category>Business</category>
        
        <category>Mobile</category>
        
        <category>App</category>
        
        <category>development</category>
        
        <category>frameworks</category>
        
        
      </item>
    
  </channel>
</rss>
