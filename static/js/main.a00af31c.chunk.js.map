{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MajorBase","lazy","MobileAppDevelopment","FourOFour","PrivacyPolicy","App","location","useLocation","background","state","fallback","style","backgroundColor","position","left","right","top","bottom","exact","path","children","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDom","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kPAGMA,EAAYC,gBAAK,kBAAM,uDACvBC,EAAuBD,gBAAK,kBAAM,8DAClCE,EAAYF,gBAAK,kBAAM,uDACvBG,EAAgBH,gBAAK,kBAAM,8DAmBlBI,MAjBf,WACE,IAAIC,EAAWC,cACXC,EAAaF,EAASG,OAASH,EAASG,MAAMD,WAClD,OACE,kBAAC,WAAD,CAAUE,SAAU,yBAAKC,MAAO,CAACC,gBAAiB,wBAAyBC,SAAU,QAASC,KAAM,EAAGC,MAAO,EAAGC,IAAK,EAAGC,OAAQ,MAC/H,kBAAC,IAAD,CAAQX,SAAUE,GAAcF,GAC9B,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,IAAIC,SAAU,kBAACpB,EAAD,QAChC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,wBAAwBC,SAAU,oCAAE,kBAACpB,EAAD,MAAa,kBAACE,EAAD,SACnE,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,iBAAiBC,SAAU,oCAAE,kBAACpB,EAAD,MAAa,kBAACI,EAAD,SAC5D,kBAAC,IAAD,CAAOe,KAAK,IAAIC,SAAU,kBAACjB,EAAD,SAE3BK,GAAc,kBAAC,IAAD,CAAOW,KAAK,wBAAwBC,SAAU,kBAAClB,EAAD,QAC5DM,GAAc,kBAAC,IAAD,CAAOW,KAAK,iBAAiBC,SAAU,kBAAChB,EAAD,UCRtDiB,EAAcC,QACW,cAA7BC,OAAOjB,SAASkB,UAEe,UAA7BD,OAAOjB,SAASkB,UAEhBD,OAAOjB,SAASkB,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1B,QACfoB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDSnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwB5B,OAAOjB,SAAS8C,MACpDC,SAAW9B,OAAOjB,SAAS+C,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,GAAN,sBAEP9B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BT,OAAOjB,SAAS0D,eAKpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC/B/BE,K","file":"static/js/main.a00af31c.chunk.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport {Switch, Route, useLocation} from 'react-router-dom';\n\nconst MajorBase = lazy(() => import('./Components/MajorBase'));\nconst MobileAppDevelopment = lazy(() => import('./Components/MobileAppDevelopment'));\nconst FourOFour = lazy(() => import('./Components/FourOFour'));\nconst PrivacyPolicy = lazy(() => import('./Components/PrivacyPolicy'));\n\nfunction App() {\n  let location = useLocation();\n  let background = location.state && location.state.background;\n  return (\n    <Suspense fallback={<div style={{backgroundColor: 'rgba(31, 31, 31, 0.4)', position: 'fixed', left: 0, right: 0, top: 0, bottom: 0}}/>}>\n      <Switch location={background || location}>\n        <Route exact path=\"/\" children={<MajorBase />} />\n        <Route exact path=\"/mobileAppDevelopment\" children={<><MajorBase /><MobileAppDevelopment /></>} />\n        <Route exact path=\"/privacyPolicy\" children={<><MajorBase /><PrivacyPolicy /></>} />\n        <Route path=\"*\" children={<FourOFour />} />\n      </Switch>\n      {background && <Route path=\"/mobileAppDevelopment\" children={<MobileAppDevelopment />} />}\n      {background && <Route path=\"/privacyPolicy\" children={<PrivacyPolicy />} />}\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDom.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}